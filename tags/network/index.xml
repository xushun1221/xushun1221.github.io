<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on XuShun's Blog</title><link>https://xushun1221.github.io/tags/network/</link><description>Recent content in network on XuShun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 21 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xushun1221.github.io/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>【Linux网络编程】10 - HTTPServer</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B10-httpserver/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B10-httpserver/</guid><description>通信流程分析 获取 http协议的第一行。 从首行中拆分 GET、文件名、协议版本。 获取用户请求的文件名。 判断文件是否存在。 stat() 判断是文件还是目录。 是</description></item><item><title>【Linux网络编程】09 - libevent</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B09-libevent/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B09-libevent/</guid><description>libevent库是开源的、精简的、跨平台的、专注于网络通信的库。 安装libevent 这里使用libevent-2.1.8版本。 libeve</description></item><item><title>【Linux网络编程】07 - UDP-Socket编程</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B07-udp-socket%E7%BC%96%E7%A8%8B/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B07-udp-socket%E7%BC%96%E7%A8%8B/</guid><description>UDP实现的C/S模型 recvfrom 从对端接收数据。（UDP） 函数原型： 1 2 3 4 5 #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/socket.h&amp;gt; ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen); 返回值： 失败，-1，errno 成功，</description></item><item><title>【Linux网络编程】08 - 本地套接字</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B08-%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B08-%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/</guid><description>本地套接字 Unix Domain Socket socket API原本是为网络通讯设计的，但后来在socket的框架上发展出一种IPC机制，就是UNIX Domain Socket。虽然网络soc</description></item><item><title>【Linux网络编程】06 - 线程池</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B06-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B06-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>线程池 为什么要使用线程池？ 回顾之前写的多线程服务器，主线程使用监听套接字循环accept客户端连接，一旦有新的客户端连接，就创建一个新的线程</description></item><item><title>【Linux网络编程】05 - epoll - Reactor 模型</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B05-epoll-reactor-%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B05-epoll-reactor-%E6%A8%A1%E5%9E%8B/</guid><description>epoll - Reactor 反应堆模型 常规模型和Reactor模型的比较 常规模型（epoll - ET - 非阻塞IO轮询） select() bind() listen()初始化监听套接字listen</description></item><item><title>【Linux网络编程】04 - epoll - ET触发模型</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B04-epoll-et%E8%A7%A6%E5%8F%91%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B04-epoll-et%E8%A7%A6%E5%8F%91%E6%A8%A1%E5%9E%8B/</guid><description>epoll事件触发模型 - LT &amp;amp; ET epoll事件有两种模型： Edge Triggered (ET)：边沿触发模型，只有数据到来时才会导致epoll_wait返回，无论缓冲</description></item><item><title>【Linux网络编程】03 - 多路IO转接服务器</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B03-%E5%A4%9A%E8%B7%AFio%E8%BD%AC%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B03-%E5%A4%9A%E8%B7%AFio%E8%BD%AC%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>多路IO转接服务器 我们之前写的服务器程序的逻辑是，主线程循环调用accept()，进行阻塞监听客户端的连接，当有连接到来时，主线程获得acc</description></item><item><title>【Linux网络编程】02 - 多进程-多线程 并发服务器</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02-%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02-%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>多进程并发服务器 父进程创建监听socket监听客户端连接，每次accept一个连接，就fork创建一个子进程来处理这个连接，然后父进程继续监</description></item><item><title>【Linux网络编程】01 - Socket编程</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket%E7%BC%96%E7%A8%8B/</link><pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket%E7%BC%96%E7%A8%8B/</guid><description>网络套接字 socket Socket本身有插座的意思，在Linux环境下，用于表示进程间网络通信的特殊文件类型。本质为内核借助缓冲区形成的伪文件。 既然是</description></item><item><title>CS144 Lab Assignment lab-4</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-4/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-4/</guid><description>前言 前后经过半个多月终于把关于TCP的几个lab写完了，★,°:.☆(￣▽￣)/$:.°★ 。 lab4的难点在于对于TCP各个状态的理解、如何</description></item><item><title>CS144 Lab Assignment lab-3</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-3/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-3/</guid><description>the TCP sender 本次实验是TCP的sender，需要完成的主要功能有： 跟踪接收方的接收窗口，正确处理接收方返回的确认号ackno和窗口大小window</description></item><item><title>CS144 Lab Assignment lab-2</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-2/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-2/</guid><description>build 首先把origin/lab2-startercode合并到本地仓库，cmake构建时，有可能会报错： CMake Error: The following variables are used in this project, but they are set to NOTFOUND. 这是因</description></item><item><title>CS144 Lab Assignment lab-1</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-1/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-1/</guid><description>stitching substrings into a byte stream 本次实验是要实现一个流重组器，能够将TCPReceiver接收到的乱序的、重复的TCP段重新组装成一个正确的、按序的、无重复的字</description></item><item><title>CS144 Lab Assignment lab-0</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-0/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-0/</guid><description>前言 最近重新学习了一下计算机网络的知识，想着搞点东西做一做，然后就看到了这个Stanford的CS144网络课，它有一系列的网络实验，主要是</description></item></channel></rss>