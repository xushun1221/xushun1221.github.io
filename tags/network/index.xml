<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on XuShun's Blog</title><link>https://xushun1221.github.io/tags/network/</link><description>Recent content in network on XuShun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 06 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xushun1221.github.io/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>【重写muduo】22 - 总结</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo22-%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo22-%E6%80%BB%E7%BB%93/</guid><description>muduo库的核心部分终于重写完了，我们来总结一下各个核心组件的功能和联系。 Channel Channel是对sockfd和其感兴趣的事件以及对应的回调函</description></item><item><title>【重写muduo】21 - 编译安装脚本&amp;测试代码</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo21-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo21-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/</guid><description>编译安装脚本 我们的项目使用cmake管理，需要编译为一个.so动态库，动态库安装到系统/usr/lib目录下，头文件拷贝到/usr/incl</description></item><item><title>【重写muduo】20 - TcpServer终章</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo20-tcpserver%E7%BB%88%E7%AB%A0/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo20-tcpserver%E7%BB%88%E7%AB%A0/</guid><description>写完TcpConnection之后，我们就可以来实现TcpServer的完整版本了。 TcpConnection主要做的事情就是，处理新到来的</description></item><item><title>【重写muduo】18 - Buffer缓冲区</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo18-buffer%E7%BC%93%E5%86%B2%E5%8C%BA/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo18-buffer%E7%BC%93%E5%86%B2%E5%8C%BA/</guid><description>在实现TcpConnection之前，需要实现底层的缓冲区Buffer，具体的实现细节在注释里非常详细的说明了。不再赘述。 源码 Buffer.hh 1 2 3 4 5 6</description></item><item><title>【重写muduo】19 - TcpConnection</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo19-tcpconnection/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo19-tcpconnection/</guid><description>TcpConnection管理一个socket及其对应的channel、tcp连接状态、一对输入输出缓冲区、设置channel的各种回调函数</description></item><item><title>【重写muduo】15 - Socket类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo15-socket%E7%B1%BB/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo15-socket%E7%B1%BB/</guid><description>Socket类封装了网络套接字相关的文件描述符和相关方法。 源码 Socket.hh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #ifndef __SOCKET_HH_#define __SOCKET_HH_ #include &amp;#34;noncopyable.hh&amp;#34; class InetAddress;</description></item><item><title>【重写muduo】16 - Acceptor</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo16-acceptor/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo16-acceptor/</guid><description>对listenfd和accept函数的封装。 Acceptor运行在mainloop中，负责接收新用户的连接。 源码 Acceptor.hh 1 2 3 4 5 6 7 8 9 10 11 12 13</description></item><item><title>【重写muduo】17 - TcpServer服务器类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo17-tcpserver%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo17-tcpserver%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB/</guid><description>到这里，muduo中和TcpServer相关的组件基本都写好了，我们先把TcpServer写个大概。 因为TcpConnection的内容还没</description></item><item><title>【重写muduo】12 - Thread</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo12-thread/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo12-thread/</guid><description>muduo库中使用了POSIX线程库，而我们使用c++11标准的线程库对线程类Thread进行封装。 源码 Thread.hh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>【重写muduo】13 - EventLoopThread</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo13-eventloopthread/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo13-eventloopthread/</guid><description>上一篇我们封装了Thread类，EventLoopThread类将一个EventLoop和一个Thread封装在一起，实现一个线程运行一个事</description></item><item><title>【重写muduo】14 - EventLoopThreadPool池</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo14-eventloopthreadpool%E6%B1%A0/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo14-eventloopthreadpool%E6%B1%A0/</guid><description>muduo中除了用于处理新用户连接的主事件循环mainloop(baseloop)外，还有进行已连接用户读写事件操作的subloop，用户可</description></item><item><title>【重写muduo】11 - EventLoop事件循环</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo11-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo11-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid><description>EventLoop事件循环类，主要是封装Poller、回调函数执行逻辑、mainloop和subloop之间的通信方法。 mainloop 与 subloop 通信方式 mud</description></item><item><title>【重写muduo】10 - CurrentThread</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo10-currentthread/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo10-currentthread/</guid><description>获得线程的唯一标识 muduo库使用的模型是：one loop per thread，每个EventLoop都是在一个单独的线程中运行的，需要控制一些和线程相</description></item><item><title>【重写muduo】08 - Poller抽象类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo08-poller%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo08-poller%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid><description>muduo中，使用Poller抽象类来抽象不同的IO复用方法，muduo支持poll和epoll两种IO复用。 在Poller实现中，我们使用</description></item><item><title>【重写muduo】09 - EPollPoller事件分发器</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo09-epollpoller%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%99%A8/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo09-epollpoller%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%99%A8/</guid><description>通过继承Poller抽象类来实现对epoll多路复用的的封装。 分析几个关键成员变量： Poller::ChannelMap Poller::channels_：用于存储所有注册到</description></item><item><title>【重写muduo】07 - Channel通道</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo07-channel%E9%80%9A%E9%81%93/</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo07-channel%E9%80%9A%E9%81%93/</guid><description>muduo库里面，TcpServer的事件循环EventLoop中，主要包含两大模块，一个是Channel列表，另一个是Poller。 Cha</description></item><item><title>【重写muduo】06 - InetAddress地址类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo06-inetaddress%E5%9C%B0%E5%9D%80%E7%B1%BB/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo06-inetaddress%E5%9C%B0%E5%9D%80%E7%B1%BB/</guid><description>这里没什么好写的，就是把sockaddr_in以及相关的函数进行封装，我们仅支持ipv4。 源码 InetAddress.hh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>【重写muduo】04 - Logger日志系统</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo04-logger%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo04-logger%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>日志系统，我们使用和muduo库不同的实现，日志直接输出到控制台。 单例模式 我们使用单例模式来实现Logger类。 使用static Logger&amp;amp; insta</description></item><item><title>【重写muduo】05 - Timestamp时间戳</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo05-timestamp%E6%97%B6%E9%97%B4%E6%88%B3/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo05-timestamp%E6%97%B6%E9%97%B4%E6%88%B3/</guid><description>时间戳类，我们只实现时间戳的核心功能，返回当前时间戳以及时间戳转格式化字符串。 使用c++11标准的chrono库来获取微秒级时间戳，使用c库</description></item><item><title>【重写muduo】02 - CMake构建项目</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo02-cmake%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo02-cmake%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE/</guid><description>在~/mymuduo/下构建该项目，使用CMake来编译生成项目。 CMakeLists.txt文件内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cmake_minimum_required(VERSION 2.5)project(mymuduo)# my</description></item><item><title>【重写muduo】03 - noncopyable接口类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo03-noncopyable%E6%8E%A5%E5%8F%A3%E7%B1%BB/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo03-noncopyable%E6%8E%A5%E5%8F%A3%E7%B1%BB/</guid><description>理解源码 在原muduo库中(noncopyable.h)有这样一个类： 1 2 3 4 5 6 7 8 9 10 class noncopyable { public: noncopyable(const noncopyable&amp;amp;) = delete; void operator=(const noncopyable&amp;amp;) = delete; protected: noncopyable() = default; ~noncopyable() = default; }; 这个类的</description></item><item><title>【重写muduo】01 - 安装和使用 muduo</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo01-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-muduo/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo01-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-muduo/</guid><description>安装 muduo 先把muduo和boost的源码下载下来（muduo需要依赖boost）。 boost 源码库编译安装 先解压： 1 2 3 4 5 6 7 xushun@xushun-virtual-machine:~/Downloads$ tar -zxvf boost_1_69_0.tar.gz ... xushun@xushun-virtual-machine:~/Downloads$ cd boost_1_69_0/ xushun@xushun-virtual-machine:~/Downloads/boost_1_69_0$ ls boost</description></item><item><title>【Linux网络编程】10 - HTTPServer</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B10-httpserver/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B10-httpserver/</guid><description>通信流程分析 获取 http协议的第一行。 从首行中拆分 GET、文件名、协议版本。 获取用户请求的文件名。 判断文件是否存在。 stat() 判断是文件还是目录。 是</description></item><item><title>【Linux网络编程】09 - libevent</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B09-libevent/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B09-libevent/</guid><description>libevent库是开源的、精简的、跨平台的、专注于网络通信的库。 安装libevent 这里使用libevent-2.1.8版本。 libeve</description></item><item><title>【Linux网络编程】07 - UDP-Socket编程</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B07-udp-socket%E7%BC%96%E7%A8%8B/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B07-udp-socket%E7%BC%96%E7%A8%8B/</guid><description>UDP实现的C/S模型 recvfrom 从对端接收数据。（UDP） 函数原型： 1 2 3 4 5 #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/socket.h&amp;gt; ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen); 返回值： 失败，-1，errno 成功，</description></item><item><title>【Linux网络编程】08 - 本地套接字</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B08-%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B08-%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/</guid><description>本地套接字 Unix Domain Socket socket API原本是为网络通讯设计的，但后来在socket的框架上发展出一种IPC机制，就是UNIX Domain Socket。虽然网络soc</description></item><item><title>【Linux网络编程】06 - 线程池</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B06-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B06-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>线程池 为什么要使用线程池？ 回顾之前写的多线程服务器，主线程使用监听套接字循环accept客户端连接，一旦有新的客户端连接，就创建一个新的线程</description></item><item><title>【Linux网络编程】05 - epoll - Reactor 模型</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B05-epoll-reactor-%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B05-epoll-reactor-%E6%A8%A1%E5%9E%8B/</guid><description>epoll - Reactor 反应堆模型 常规模型和Reactor模型的比较 常规模型（epoll - ET - 非阻塞IO轮询） select() bind() listen()初始化监听套接字listen</description></item><item><title>【Linux网络编程】04 - epoll - ET触发模型</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B04-epoll-et%E8%A7%A6%E5%8F%91%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B04-epoll-et%E8%A7%A6%E5%8F%91%E6%A8%A1%E5%9E%8B/</guid><description>epoll事件触发模型 - LT &amp;amp; ET epoll事件有两种模型： Edge Triggered (ET)：边沿触发模型，只有数据到来时才会导致epoll_wait返回，无论缓冲</description></item><item><title>【Linux网络编程】03 - 多路IO转接服务器</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B03-%E5%A4%9A%E8%B7%AFio%E8%BD%AC%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B03-%E5%A4%9A%E8%B7%AFio%E8%BD%AC%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>多路IO转接服务器 我们之前写的服务器程序的逻辑是，主线程循环调用accept()，进行阻塞监听客户端的连接，当有连接到来时，主线程获得acc</description></item><item><title>【Linux网络编程】02 - 多进程-多线程 并发服务器</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02-%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02-%E5%A4%9A%E8%BF%9B%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>多进程并发服务器 父进程创建监听socket监听客户端连接，每次accept一个连接，就fork创建一个子进程来处理这个连接，然后父进程继续监</description></item><item><title>【Linux网络编程】01 - Socket编程</title><link>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket%E7%BC%96%E7%A8%8B/</link><pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B01-socket%E7%BC%96%E7%A8%8B/</guid><description>网络套接字 socket Socket本身有插座的意思，在Linux环境下，用于表示进程间网络通信的特殊文件类型。本质为内核借助缓冲区形成的伪文件。 既然是</description></item><item><title>CS144 Lab Assignment lab-4</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-4/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-4/</guid><description>前言 前后经过半个多月终于把关于TCP的几个lab写完了，★,°:.☆(￣▽￣)/$:.°★ 。 lab4的难点在于对于TCP各个状态的理解、如何</description></item><item><title>CS144 Lab Assignment lab-3</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-3/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-3/</guid><description>the TCP sender 本次实验是TCP的sender，需要完成的主要功能有： 跟踪接收方的接收窗口，正确处理接收方返回的确认号ackno和窗口大小window</description></item><item><title>CS144 Lab Assignment lab-2</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-2/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-2/</guid><description>build 首先把origin/lab2-startercode合并到本地仓库，cmake构建时，有可能会报错： CMake Error: The following variables are used in this project, but they are set to NOTFOUND. 这是因</description></item><item><title>CS144 Lab Assignment lab-1</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-1/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-1/</guid><description>stitching substrings into a byte stream 本次实验是要实现一个流重组器，能够将TCPReceiver接收到的乱序的、重复的TCP段重新组装成一个正确的、按序的、无重复的字</description></item><item><title>CS144 Lab Assignment lab-0</title><link>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-0/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/cs144-lab-assignment-lab-0/</guid><description>前言 最近重新学习了一下计算机网络的知识，想着搞点东西做一做，然后就看到了这个Stanford的CS144网络课，它有一系列的网络实验，主要是</description></item></channel></rss>