<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法与数据结构 on XuShun's Blog</title><link>https://xushun1221.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><description>Recent content in 算法与数据结构 on XuShun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 17 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xushun1221.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><item><title>【算法】快速排序</title><link>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid><description>问题1：partition1.0 问题描述：给定一个数组和一个数x，将数组中小于x的数放在数组左边，大于等于x的数放在数组右边，要求空间复杂度</description></item><item><title>Coding之小技巧</title><link>https://xushun1221.github.io/2022/coding%E4%B9%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/coding%E4%B9%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>前言 记录一些Coding的技巧。 取数组下标中点 22.2.16 常规的取下标中点方法：mid = (left + right) / 2，这种方法在数组很大的时候，可能会溢出，所以用这种方</description></item><item><title>【算法】归并排序</title><link>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid><description>归并排序 直接代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 void merge(vector&amp;lt;int&amp;gt;&amp;amp; nums, int left, int mid, int right) { if (left == right) return; vector&amp;lt;int&amp;gt; temp(right - left + 1); int l = left, r = mid + 1, i = 0; while (l &amp;lt;= mid</description></item><item><title>【算法】二分查找</title><link>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid><description>前言 二分查找算法，思想比较简单，但是实现上有许多细节需要考虑，尤其是在边界条件的判断上，很容易出错。最近看了一个关于二分查找的总结，用另一种</description></item><item><title>【算法】C++对数器</title><link>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95c-%E5%AF%B9%E6%95%B0%E5%99%A8/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95c-%E5%AF%B9%E6%95%B0%E5%99%A8/</guid><description>对数器是什么 对数器是用来测试算法正确性的一种方式，在找不到合适的在线OJ时，我们也可以编写一个对数器来测试自己编写的算法的正确性。原理是用一</description></item><item><title>【算法】位运算之异或运算</title><link>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B9%8B%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B9%8B%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</guid><description>什么是异或 逻辑运算符异或（exclusive or），XOR或EOR（编程语言中多用^），对两个运算元的一种逻辑析取类型，异或算符的值为真当且</description></item></channel></rss>