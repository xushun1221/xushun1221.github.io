<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>muduo on XuShun's Blog</title><link>https://xushun1221.github.io/tags/muduo/</link><description>Recent content in muduo on XuShun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 30 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xushun1221.github.io/tags/muduo/index.xml" rel="self" type="application/rss+xml"/><item><title>【ChatServer】11 - 一对一聊天&amp;离线消息</title><link>https://xushun1221.github.io/2022/chatserver11-%E4%B8%80%E5%AF%B9%E4%B8%80%E8%81%8A%E5%A4%A9%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver11-%E4%B8%80%E5%AF%B9%E4%B8%80%E8%81%8A%E5%A4%A9%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF/</guid><description>一对一聊天消息类型为：PEER_CHAT_MSG。 发送的消息类似于：{&amp;quot;msg_type&amp;quot;:PEER_CHAT_MSG,</description></item><item><title>【ChatServer】12 - 服务器异常中止处理</title><link>https://xushun1221.github.io/2022/chatserver12-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%AD%A2%E5%A4%84%E7%90%86/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver12-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%AD%A2%E5%A4%84%E7%90%86/</guid><description>之前测试功能时，如果服务器异常中止，那么当前的在线用户的在线状态并不会被更改为离线（没有机会更改数据库状态），如果下次服务器启动，用户就无法</description></item><item><title>【ChatServer】13 - 添加好友业务</title><link>https://xushun1221.github.io/2022/chatserver13-%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B%E4%B8%9A%E5%8A%A1/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver13-%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B%E4%B8%9A%E5%8A%A1/</guid><description>业务逻辑是这样滴，系统中的所有人都可以互发消息，无需好友身份。添加好友也无需对方同意，好友的功能类似于通讯录，客户端登录时，服务器会将该用户</description></item><item><title>【ChatServer】10 - 客户端异常退出处理</title><link>https://xushun1221.github.io/2022/chatserver10-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E5%A4%84%E7%90%86/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver10-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E5%A4%84%E7%90%86/</guid><description>客户端异常退出，客户端没有向服务器发送下线消息，而是直接断开连接。这种情况下，我们需要进行在数据库中更改用户的登录状态。 用户连接异常断开，我</description></item><item><title>【ChatServer】05 - 网络模块代码</title><link>https://xushun1221.github.io/2022/chatserver05-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%A0%81/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver05-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E4%BB%A3%E7%A0%81/</guid><description>网络模块代码 使用muduo库，构建基于Reactor模型的服务器框架。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35</description></item><item><title>【ChatServer】06 - 业务模块与网络模块解耦</title><link>https://xushun1221.github.io/2022/chatserver06-%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%80%A6/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver06-%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9D%97%E8%A7%A3%E8%80%A6/</guid><description>业务与网络模块解耦 我们使用了muduo网络库搭建服务器框架，可以直接注册回调函数对客户端的消息进行处理，但是这样业务模块就和网络模块耦合了。</description></item><item><title>【ChatServer】01 - 介绍</title><link>https://xushun1221.github.io/2022/chatserver01-%E4%BB%8B%E7%BB%8D/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver01-%E4%BB%8B%E7%BB%8D/</guid><description>该项目是一个学习项目，项目目标：开发一个C++实现的局域网集群聊天服务器。 技术栈 JSON库：JSON for Modern C++ muduo网络库 nginx源码编译</description></item><item><title>【ChatServer】02 - 各种环境的安装</title><link>https://xushun1221.github.io/2022/chatserver02-%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/chatserver02-%E5%90%84%E7%A7%8D%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85/</guid><description>我的开发环境：CentOS7 CentOS7：VMware Workstation 虚拟机 JSON库：JSON for Modern C++，直接使用json.hpp即可 boost+mo</description></item><item><title>【重写muduo】22 - 总结</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo22-%E6%80%BB%E7%BB%93/</link><pubDate>Thu, 06 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo22-%E6%80%BB%E7%BB%93/</guid><description>muduo库的核心部分终于重写完了，我们来总结一下各个核心组件的功能和联系。 Channel Channel是对sockfd和其感兴趣的事件以及对应的回调函</description></item><item><title>【重写muduo】21 - 编译安装脚本&amp;测试代码</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo21-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo21-%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/</guid><description>编译安装脚本 我们的项目使用cmake管理，需要编译为一个.so动态库，动态库安装到系统/usr/lib目录下，头文件拷贝到/usr/incl</description></item><item><title>【重写muduo】20 - TcpServer终章</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo20-tcpserver%E7%BB%88%E7%AB%A0/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo20-tcpserver%E7%BB%88%E7%AB%A0/</guid><description>写完TcpConnection之后，我们就可以来实现TcpServer的完整版本了。 TcpConnection主要做的事情就是，处理新到来的</description></item><item><title>【重写muduo】18 - Buffer缓冲区</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo18-buffer%E7%BC%93%E5%86%B2%E5%8C%BA/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo18-buffer%E7%BC%93%E5%86%B2%E5%8C%BA/</guid><description>在实现TcpConnection之前，需要实现底层的缓冲区Buffer，具体的实现细节在注释里非常详细的说明了。不再赘述。 源码 Buffer.hh 1 2 3 4 5 6</description></item><item><title>【重写muduo】19 - TcpConnection</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo19-tcpconnection/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo19-tcpconnection/</guid><description>TcpConnection管理一个socket及其对应的channel、tcp连接状态、一对输入输出缓冲区、设置channel的各种回调函数</description></item><item><title>【重写muduo】15 - Socket类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo15-socket%E7%B1%BB/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo15-socket%E7%B1%BB/</guid><description>Socket类封装了网络套接字相关的文件描述符和相关方法。 源码 Socket.hh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #ifndef __SOCKET_HH_#define __SOCKET_HH_ #include &amp;#34;noncopyable.hh&amp;#34; class InetAddress;</description></item><item><title>【重写muduo】16 - Acceptor</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo16-acceptor/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo16-acceptor/</guid><description>对listenfd和accept函数的封装。 Acceptor运行在mainloop中，负责接收新用户的连接。 源码 Acceptor.hh 1 2 3 4 5 6 7 8 9 10 11 12 13</description></item><item><title>【重写muduo】17 - TcpServer服务器类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo17-tcpserver%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo17-tcpserver%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%BB/</guid><description>到这里，muduo中和TcpServer相关的组件基本都写好了，我们先把TcpServer写个大概。 因为TcpConnection的内容还没</description></item><item><title>【重写muduo】12 - Thread</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo12-thread/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo12-thread/</guid><description>muduo库中使用了POSIX线程库，而我们使用c++11标准的线程库对线程类Thread进行封装。 源码 Thread.hh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>【重写muduo】13 - EventLoopThread</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo13-eventloopthread/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo13-eventloopthread/</guid><description>上一篇我们封装了Thread类，EventLoopThread类将一个EventLoop和一个Thread封装在一起，实现一个线程运行一个事</description></item><item><title>【重写muduo】14 - EventLoopThreadPool池</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo14-eventloopthreadpool%E6%B1%A0/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo14-eventloopthreadpool%E6%B1%A0/</guid><description>muduo中除了用于处理新用户连接的主事件循环mainloop(baseloop)外，还有进行已连接用户读写事件操作的subloop，用户可</description></item><item><title>【重写muduo】11 - EventLoop事件循环</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo11-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo11-eventloop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid><description>EventLoop事件循环类，主要是封装Poller、回调函数执行逻辑、mainloop和subloop之间的通信方法。 mainloop 与 subloop 通信方式 mud</description></item><item><title>【重写muduo】10 - CurrentThread</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo10-currentthread/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo10-currentthread/</guid><description>获得线程的唯一标识 muduo库使用的模型是：one loop per thread，每个EventLoop都是在一个单独的线程中运行的，需要控制一些和线程相</description></item><item><title>【重写muduo】08 - Poller抽象类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo08-poller%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo08-poller%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid><description>muduo中，使用Poller抽象类来抽象不同的IO复用方法，muduo支持poll和epoll两种IO复用。 在Poller实现中，我们使用</description></item><item><title>【重写muduo】09 - EPollPoller事件分发器</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo09-epollpoller%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%99%A8/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo09-epollpoller%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E5%99%A8/</guid><description>通过继承Poller抽象类来实现对epoll多路复用的的封装。 分析几个关键成员变量： Poller::ChannelMap Poller::channels_：用于存储所有注册到</description></item><item><title>【重写muduo】07 - Channel通道</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo07-channel%E9%80%9A%E9%81%93/</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo07-channel%E9%80%9A%E9%81%93/</guid><description>muduo库里面，TcpServer的事件循环EventLoop中，主要包含两大模块，一个是Channel列表，另一个是Poller。 Cha</description></item><item><title>【重写muduo】06 - InetAddress地址类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo06-inetaddress%E5%9C%B0%E5%9D%80%E7%B1%BB/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo06-inetaddress%E5%9C%B0%E5%9D%80%E7%B1%BB/</guid><description>这里没什么好写的，就是把sockaddr_in以及相关的函数进行封装，我们仅支持ipv4。 源码 InetAddress.hh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>【重写muduo】04 - Logger日志系统</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo04-logger%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo04-logger%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>日志系统，我们使用和muduo库不同的实现，日志直接输出到控制台。 单例模式 我们使用单例模式来实现Logger类。 使用static Logger&amp;amp; insta</description></item><item><title>【重写muduo】05 - Timestamp时间戳</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo05-timestamp%E6%97%B6%E9%97%B4%E6%88%B3/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo05-timestamp%E6%97%B6%E9%97%B4%E6%88%B3/</guid><description>时间戳类，我们只实现时间戳的核心功能，返回当前时间戳以及时间戳转格式化字符串。 使用c++11标准的chrono库来获取微秒级时间戳，使用c库</description></item><item><title>【重写muduo】02 - CMake构建项目</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo02-cmake%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo02-cmake%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE/</guid><description>在~/mymuduo/下构建该项目，使用CMake来编译生成项目。 CMakeLists.txt文件内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cmake_minimum_required(VERSION 2.5)project(mymuduo)# my</description></item><item><title>【重写muduo】03 - noncopyable接口类</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo03-noncopyable%E6%8E%A5%E5%8F%A3%E7%B1%BB/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo03-noncopyable%E6%8E%A5%E5%8F%A3%E7%B1%BB/</guid><description>理解源码 在原muduo库中(noncopyable.h)有这样一个类： 1 2 3 4 5 6 7 8 9 10 class noncopyable { public: noncopyable(const noncopyable&amp;amp;) = delete; void operator=(const noncopyable&amp;amp;) = delete; protected: noncopyable() = default; ~noncopyable() = default; }; 这个类的</description></item><item><title>【重写muduo】01 - 安装和使用 muduo</title><link>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo01-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-muduo/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E9%87%8D%E5%86%99muduo01-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-muduo/</guid><description>安装 muduo 这里是在Ubuntu环境下。 先把muduo和boost的源码下载下来（muduo需要依赖boost）。 boost 源码库编译安装 先解压： 1 2 3 4</description></item></channel></rss>