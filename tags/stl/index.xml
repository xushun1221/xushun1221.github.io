<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>STL on XuShun's Blog</title><link>https://xushun1221.github.io/tags/stl/</link><description>Recent content in STL on XuShun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 20 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xushun1221.github.io/tags/stl/index.xml" rel="self" type="application/rss+xml"/><item><title>【C++基础】06 - 继承与多态</title><link>https://xushun1221.github.io/2022/c-%E5%9F%BA%E7%A1%8006-%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/c-%E5%9F%BA%E7%A1%8006-%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/</guid><description>继承的本质和原理 继承的本质：代码的复用 类和类之间的关系： 组合：a part of 继承：a kind of 三种继承方式下，派生类对基类成员的访问限定情况： 继承方式 基类</description></item><item><title>【C++基础】05 - 运算符重载、迭代器iterator、operator new</title><link>https://xushun1221.github.io/2022/c-%E5%9F%BA%E7%A1%8005-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E8%BF%AD%E4%BB%A3%E5%99%A8iteratoroperator-new/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/c-%E5%9F%BA%E7%A1%8005-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E8%BF%AD%E4%BB%A3%E5%99%A8iteratoroperator-new/</guid><description>运算符重载的意义在于，使得对象的运算表现得和编译器内置的类型一样。例如： 1 2 3 4 template&amp;lt;typename T&amp;gt; T sum(T a, T b) { return a + b; // a.+(b); } 如果T是内置类型，a + b可以直</description></item><item><title>【C++基础】04 - 模板编程、分配器allocator</title><link>https://xushun1221.github.io/2022/c-%E5%9F%BA%E7%A1%8004-%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B%E5%88%86%E9%85%8D%E5%99%A8allocator/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/c-%E5%9F%BA%E7%A1%8004-%E6%A8%A1%E6%9D%BF%E7%BC%96%E7%A8%8B%E5%88%86%E9%85%8D%E5%99%A8allocator/</guid><description>函数模板 相关的概念： 函数模板：不进行编译，因为调用前不知道类型 模板的实例化：函数调用点进行实例化 模板函数：需要编译的代码 模板类型参数：typ</description></item></channel></rss>