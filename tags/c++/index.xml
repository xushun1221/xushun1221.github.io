<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on XuShun's Blog</title><link>https://xushun1221.github.io/tags/c++/</link><description>Recent content in C++ on XuShun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 18 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xushun1221.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>【算法】堆排序</title><link>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E5%A0%86%E6%8E%92%E5%BA%8F/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E5%A0%86%E6%8E%92%E5%BA%8F/</guid><description>堆排序 原理：利用大根堆（小根堆）结构来进行排序。 实现1 这种实现方法，在建立最大堆时，从后向前对每个有孩子的结点进行了一次向下调整算法，建堆时</description></item><item><title>Coding之小技巧</title><link>https://xushun1221.github.io/2022/coding%E4%B9%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/coding%E4%B9%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>前言 记录一些Coding的技巧。 取数组下标中点 22.2.16 常规的取下标中点方法：mid = (left + right) / 2，这种方法在数组很大的时候，可能会溢出，所以用这种方</description></item><item><title>Linux下使用VSCode和CMake进行C++开发【5】</title><link>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%915/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%915/</guid><description>前言 学了这么多，写一个简单的项目来总结一下。 写源码 源码 编译 编译 调试 点击Run and Debug按钮，新建launch.json文件，然后按F5即可</description></item><item><title>Linux下使用VSCode和CMake进行C++开发【3】</title><link>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%913/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%913/</guid><description>安装VSCode 直接官网下载最新版本的deb包，地址：https://code.visualstudio.com； 在下载deb包的目录下打开</description></item><item><title>Linux下使用VSCode和CMake进行C++开发【4】</title><link>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%914/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%914/</guid><description>CMake是啥 一个跨平台的安装编译工具，可以使用简单的语句来描述所有平台的编译安装过程； 是大部分C++开源项目的标配； CMake语法特性 基本</description></item><item><title>Linux下使用VSCode和CMake进行C++开发【2】</title><link>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%912/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%912/</guid><description>GDB调试器介绍 GDB是什么 GDB(GNU Debugger)是一个用来调试C/C++程序的功能强大的调试器，是Linux系统开发C/C++最常用的调试器</description></item><item><title>Linux下使用VSCode和CMake进行C++开发【1】</title><link>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%911/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/linux%E4%B8%8B%E4%BD%BF%E7%94%A8vscode%E5%92%8Ccmake%E8%BF%9B%E8%A1%8Cc-%E5%BC%80%E5%8F%911/</guid><description>安装Linux系统 这里用的是虚拟机 Ubuntu 18.04 LTS 安装过程略。 安装GCC、GDB、CMake 安装GCC，GDB 1 2 3 sudo apt update sudo apt install build-essential gdb 安装CMake 1 sudo</description></item><item><title>【算法】二分查找</title><link>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/%E7%AE%97%E6%B3%95%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid><description>前言 二分查找算法，思想比较简单，但是实现上有许多细节需要考虑，尤其是在边界条件的判断上，很容易出错。最近看了一个关于二分查找的总结，用另一种</description></item></channel></rss>