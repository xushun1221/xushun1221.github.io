<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on XuShun's Blog</title><link>https://xushun1221.github.io/tags/mysql/</link><description>Recent content in MySQL on XuShun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 15 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xushun1221.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>【MySQL】30 - 主从复制</title><link>https://xushun1221.github.io/2022/mysql30-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql30-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</guid><description>在实际生产环境中，如果对mysql数据库的读和写都在一台数据库服务器中操作，无论是在安全性、高可用性，还是高并发等各个方面都是不能满足实际需</description></item><item><title>【MySQL】31 - 读写分离</title><link>https://xushun1221.github.io/2022/mysql31-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql31-%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</guid><description>读写分离 原理 读写分离就是在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，</description></item><item><title>【MySQL】32 - 分库分表</title><link>https://xushun1221.github.io/2022/mysql32-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql32-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</guid><description>数据库架构演变 刚开始多数项目用单机数据库就够了，随着服务器流量越来越大，面对的请求也越来越多，我们做了数据库读写分离， 使用多个从库副本（Sl</description></item><item><title>【MySQL】27 - binlog数据恢复</title><link>https://xushun1221.github.io/2022/mysql27-binlog%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql27-binlog%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/</guid><description>使用binlog 默认binlog文件位置 1 2 3 4 5 6 7 8 [xushun@localhost ~]$ sudo ls /var/lib/mysql auto.cnf ib_logfile0 mysql-bin.000003 school ca-key.pem ib_logfile1 mysql-bin.index server-cert.pem ca.pem ibtmp1 mysql.sock server-key.pem client-cert.pem localhost-slow.log mysql.sock.lock sys client-key.pem mysql performance_schema ib_buffer_pool mysql-bin.000001 private_key.pem ibdata1 mysql-bin.000002 public_key.pem 查看和刷新binlog，</description></item><item><title>【MySQL】28 - mysqldump数据备份</title><link>https://xushun1221.github.io/2022/mysql28-mysqldump%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql28-mysqldump%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</guid><description>mysqldump也是mysql自带的一个数据备份工具。 使用方法： 1 2 3 4 5 [root@localhost mysql]# mysqldump Usage: mysqldump [OPTIONS] database [tables] OR mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...] OR mysqldump [OPTIONS] --all-databases [OPTIONS] For more options, use mysqldump --help 备份、恢复</description></item><item><title>【MySQL】29 - SQL的完整处理流程</title><link>https://xushun1221.github.io/2022/mysql29-sql%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql29-sql%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</guid><description>SQL处理流程 连接器：管理连接，权限验证 解析器：词法以及语法分析 优化器：生成执行计划，选择合适索引 执行器：调用存储引擎接口，进行读写操作 存储</description></item><item><title>【MySQL】23 - 意向锁、死锁、锁的优化建议</title><link>https://xushun1221.github.io/2022/mysql23-%E6%84%8F%E5%90%91%E9%94%81%E6%AD%BB%E9%94%81%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql23-%E6%84%8F%E5%90%91%E9%94%81%E6%AD%BB%E9%94%81%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</guid><description>InnoDB表级锁 InnoDB支持行锁，但是不一定每次都会使用行锁，行锁依赖于索引项，如果没有索引，还是使用表锁。 在绝大部分情况下都应该使用</description></item><item><title>【MySQL】24 - redo log 重做日志</title><link>https://xushun1221.github.io/2022/mysql24-redo-log-%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql24-redo-log-%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97/</guid><description>redo log 重做日志 redo log 重做日志，解决的核心问题是：数据持久性！ 在COMMIT提交事务成功后，无论系统崩溃、掉电，还是发生其他不可预期的问题，下次m</description></item><item><title>【MySQL】25 - MySQL如何优化？</title><link>https://xushun1221.github.io/2022/mysql25-mysql%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql25-mysql%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96/</guid><description>无论是在实际工程项目中，还是面试中，对MySQL的优化都是一个比较常见的问题。这里分几个方面来谈一下MySQL的优化方法。 MySQL需要优化</description></item><item><title>【MySQL】26 - MySQL 日志系统</title><link>https://xushun1221.github.io/2022/mysql26-mysql-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql26-mysql-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>MySQL 日志系统 本章介绍MySQL的日志系统，主要介绍mysql server层的日志系统，之前讲的undo log和redo log是在存储引擎层的事</description></item><item><title>【MySQL】22 - MVCC和undo log</title><link>https://xushun1221.github.io/2022/mysql22-mvcc%E5%92%8Cundo-log/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql22-mvcc%E5%92%8Cundo-log/</guid><description>已提交读和可重复读的实现原理 之前几篇已经分析了未提交读和串行化的实现原理，未提交读相当于没有做任何的并发控制，串行化完全使用共享锁、排他锁、</description></item><item><title>【MySQL】21 - InnoDB间隙锁：解决幻读</title><link>https://xushun1221.github.io/2022/mysql21-innodb%E9%97%B4%E9%9A%99%E9%94%81%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql21-innodb%E9%97%B4%E9%9A%99%E9%94%81%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB/</guid><description>串行化隔离级别下，如何解决虚读（幻读）问题？ 答：间隙锁（gap lock）！ 本章内容是，串行化隔离级别的实现原理，即间隙锁解决幻读问题。 幻读问</description></item><item><title>【MySQL】18 - MySQL事务</title><link>https://xushun1221.github.io/2022/mysql18-mysql%E4%BA%8B%E5%8A%A1/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql18-mysql%E4%BA%8B%E5%8A%A1/</guid><description>事务的核心概念 一个事务是由一条或者多条对数据库操作的SQL语句所组成的一个不可分割的单元（原子性），只有当事务中的所有操作都正常执行完了，整</description></item><item><title>【MySQL】19 - 事务并发问题&amp;隔离级别</title><link>https://xushun1221.github.io/2022/mysql19-%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql19-%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid><description>事务并发存在的问题 事务处理不经隔离，并发执行事务时通常会发生以下的问题： 脏读（Dirty Read）：一个事务读取了另一个事务未提交的数据。例</description></item><item><title>【MySQL】20 - 表级锁、行级锁、排他锁、共享锁</title><link>https://xushun1221.github.io/2022/mysql20-%E8%A1%A8%E7%BA%A7%E9%94%81%E8%A1%8C%E7%BA%A7%E9%94%81%E6%8E%92%E4%BB%96%E9%94%81%E5%85%B1%E4%BA%AB%E9%94%81/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql20-%E8%A1%A8%E7%BA%A7%E9%94%81%E8%A1%8C%E7%BA%A7%E9%94%81%E6%8E%92%E4%BB%96%E9%94%81%E5%85%B1%E4%BA%AB%E9%94%81/</guid><description>表级锁、行级锁（粒度） 表级锁：对整张表加锁。开销小，加锁快，不会出现死锁；锁粒度大，发生锁冲突的概率高，并发度低； 行级锁：对某行记录加锁。开</description></item><item><title>【MySQL】17 - sql和索引优化：慢查询日志</title><link>https://xushun1221.github.io/2022/mysql17-sql%E5%92%8C%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql17-sql%E5%92%8C%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</guid><description>如何发现和分析sql和索引优化问题呢？ 第一，可以用EXPLAIN语句分析一下需要优化的sql，能看出一些问题，比如是不是没有加索引、索引有没</description></item><item><title>【MySQL】14 - MyISAM主键和二级索引树</title><link>https://xushun1221.github.io/2022/mysql14-myisam%E4%B8%BB%E9%94%AE%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E6%A0%91/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql14-myisam%E4%B8%BB%E9%94%AE%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E6%A0%91/</guid><description>MyISAM存储引擎采用B+索引树，数据和索引存储在两个文件中（.MYD .MYI）。 MyISAM 主键索引 和InnoDB不同的是，MyISAM主键索引树</description></item><item><title>【MySQL】15 - 哈希索引</title><link>https://xushun1221.github.io/2022/mysql15-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql15-%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</guid><description>哈希索引 用于搜索的数据结构常见的就是，平衡树和哈希表。存储引擎也是，InnoDB和MyISAM引擎支持B+树索引，而MEMORY引擎（基于内</description></item><item><title>【MySQL】16 - InnoDB自适应哈希索引</title><link>https://xushun1221.github.io/2022/mysql16-innodb%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql16-innodb%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95/</guid><description>自适应哈希索引 - 提高二级索引查询性能 InnoDB中，使用二级索引树进行查询时，如果查询字段在二级索引树上，就直接完成搜索，否则需要根据搜索到</description></item><item><title>【MySQL】12 - B树索引：索引的底层原理</title><link>https://xushun1221.github.io/2022/mysql12-b%E6%A0%91%E7%B4%A2%E5%BC%95%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql12-b%E6%A0%91%E7%B4%A2%E5%BC%95%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</guid><description>MySQL索引的实现原理 MySQL支持两种索引，一种是B-树索引，一种是哈希索引，大家知道，B-树和哈希表在数据查询时的效率是非常高的。 这里</description></item><item><title>【MySQL】13 - InnoDB主键和二级索引树</title><link>https://xushun1221.github.io/2022/mysql13-innodb%E4%B8%BB%E9%94%AE%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E6%A0%91/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql13-innodb%E4%B8%BB%E9%94%AE%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E6%A0%91/</guid><description>InnoDB存储引擎采用B+索引树，数据和索引存储在同一个文件中（.ibd）。 InnoDB 主键索引 InnoDB的主键索引树，非叶子节点存储索引key，</description></item><item><title>【MySQL】10 - 存储引擎</title><link>https://xushun1221.github.io/2022/mysql10-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql10-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid><description>MySQL 存储引擎 表的结构、数据、索引的存储方式，由存储引擎直接决定。 MySQL的一个特点就是，支持插件式的存储引擎，可以更换不同的存储引擎。 查看m</description></item><item><title>【MySQL】11 - 索引</title><link>https://xushun1221.github.io/2022/mysql11-%E7%B4%A2%E5%BC%95/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql11-%E7%B4%A2%E5%BC%95/</guid><description>MySQL 索引 当表中的数据量到达几十万甚至上百万的时候，SQL查询所花费的时间会很长，导致业务超时出错，此时就需要用索引来加速SQL查询。 索引解决的</description></item><item><title>【MySQL】09 - 连接查询详解</title><link>https://xushun1221.github.io/2022/mysql09-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E8%AF%A6%E8%A7%A3/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql09-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E8%AF%A6%E8%A7%A3/</guid><description>连接查询 连接查询就是在一次sql查询中查询多张相关联的表。 为什么不使用多个sql进行查询？因为效率低，当mysql client每次发送sql</description></item><item><title>【MySQL】07 - LIMIT分页查询</title><link>https://xushun1221.github.io/2022/mysql07-limit%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql07-limit%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</guid><description>分页查询 分页查询的基础语法： SELECT * FROM user LIMIT 2;，user表中的前两行 SELECT * FROM user LIMIT 1,3;，从user表中第1行开始取三行 SELECT * FROM user LIMIT 3 OFFSET 1;，同上 查</description></item><item><title>【MySQL】08 - 初识排序和分组 ORDER、GROUP BY</title><link>https://xushun1221.github.io/2022/mysql08-%E5%88%9D%E8%AF%86%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84-ordergroup-by/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql08-%E5%88%9D%E8%AF%86%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E7%BB%84-ordergroup-by/</guid><description>ORDER BY 排序 使用方法： SELECT * FROM user ORDER BY name ASC;，升序 SELECT * FROM user ORDER BY age DESC;，降序 SELECT * FROM user ORDER BY name,age,sex;，多个排序字段，前面的相同</description></item><item><title>【MySQL】06 - 单表查询常用操作</title><link>https://xushun1221.github.io/2022/mysql06-%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql06-%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid><description>常见的一些单表查询的操作 带IN子查询 [NOT]IN(元素1,元素2,...) SELECT * FROM user WHERE id IN(1,2,3,4,5,6,7); SELECT * FROM user WHERE id NOT IN(1,2,3,4,5,6,7); 括号中的列表也可以是另一个sql语</description></item><item><title>【MySQL】04 - 范式设计</title><link>https://xushun1221.github.io/2022/mysql04-%E8%8C%83%E5%BC%8F%E8%AE%BE%E8%AE%A1/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql04-%E8%8C%83%E5%BC%8F%E8%AE%BE%E8%AE%A1/</guid><description>关系型数据库范式设计 范式设计使用简洁的表述，描述了在数据库设计时需要遵循的一些原则。 使用数据库范式可以带来许多好处，最重要的有三点： 减少数据</description></item><item><title>【MySQL】05 - 基础CRUD操作</title><link>https://xushun1221.github.io/2022/mysql05-%E5%9F%BA%E7%A1%80crud%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql05-%E5%9F%BA%E7%A1%80crud%E6%93%8D%E4%BD%9C/</guid><description>结构化查询语句 SQL SQL是结构化查询语言（Structure Query Language），它是关系型数据库的通用语言。 SQL主要可以划分为以下3个类别</description></item><item><title>【MySQL】02 - 数据类型、运算符、完整性约束</title><link>https://xushun1221.github.io/2022/mysql02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F/</guid><description>数据类型 MySQL数据类型定义了数据的大小范围，因此使用时选择合适的类型，不仅会降低表占用的磁盘空间，间接减少了磁盘I/O的次数，提高了表的</description></item><item><title>【MySQL】03 - 表设计原则</title><link>https://xushun1221.github.io/2022/mysql03-%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql03-%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid><description>关系型数据库表设计 项目需求分析完成后，需要对库表进行设计，定义库表的结构：有哪些实体需要抽象成表、表中都有哪些字段、每个字段用什么类型、表与</description></item><item><title>【MySQL】01 - 安装配置</title><link>https://xushun1221.github.io/2022/mysql01-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://xushun1221.github.io/2022/mysql01-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>使用MySQL5.7 安装CentOS7 之前一直用Ubuntu，这次用CentOS试试。 下载好镜像文件CentOS-7-x86_64-DVD-</description></item></channel></rss>